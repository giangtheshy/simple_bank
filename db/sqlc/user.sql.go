// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (username, full_name, hash_password, email) VALUES($1, $2, $3, $4) RETURNING username, full_name, hash_password, email, created_at, changed_password_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	FullName     string `json:"full_name"`
	HashPassword string `json:"hash_password"`
	Email        string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.HashPassword,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
		&i.ChangedPasswordAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.users WHERE username=$1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, full_name, hash_password, email, created_at, changed_password_at FROM public.users WHERE username=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
		&i.ChangedPasswordAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, full_name, hash_password, email, created_at, changed_password_at FROM public.users ORDER BY username LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.FullName,
			&i.HashPassword,
			&i.Email,
			&i.CreatedAt,
			&i.ChangedPasswordAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE public.users SET  email=$1 WHERE username=$2 RETURNING username, full_name, hash_password, email, created_at, changed_password_at
`

type UpdateUserEmailParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
		&i.ChangedPasswordAt,
	)
	return i, err
}

const updateUserFullName = `-- name: UpdateUserFullName :one
UPDATE public.users SET  full_name=$1 WHERE username=$2 RETURNING username, full_name, hash_password, email, created_at, changed_password_at
`

type UpdateUserFullNameParams struct {
	FullName string `json:"full_name"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserFullName(ctx context.Context, arg UpdateUserFullNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserFullName, arg.FullName, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
		&i.ChangedPasswordAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE public.users SET  hash_password=$1, changed_password_at=now() WHERE username=$2 RETURNING username, full_name, hash_password, email, created_at, changed_password_at
`

type UpdateUserPasswordParams struct {
	HashPassword string `json:"hash_password"`
	Username     string `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.HashPassword, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
		&i.ChangedPasswordAt,
	)
	return i, err
}
